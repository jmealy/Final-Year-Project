/*

This program doesn't detect edges with compass operators and a laplacian
operator. It should output  raw grey-scale images with edges. The output
doesn't look like edges at all.

In novicee terms, how do I correct the errors? Any improvements are welcome.
(I'll even accept your corrected code.)

(If I convolve the INPUT.IMAGE with a digital gaussian [ by ] to remove
noise, will I get an improvement with the laplacian.)

-------------------------- types of edge detection-------------------------*/
#include <stdio.h> 
#include <math.h> 

#define IMAGEWIDTH 
#define IMAGEHEIGHT 

unsigned char Input_Image [IMAGEHEIGHT][IMAGEWIDTH];

unsigned char Angles_Wanted [IMAGEHEIGHT][IMAGEWIDTH];
unsigned char Magnitude_Image [IMAGEHEIGHT][IMAGEWIDTH];

int Laplace_Op [][] = { ,-, , -,,-,  ,-, };

int Compass_Op [][] = { , , ,  ,, , -,-,-};
int Compass_Op [][] = { , , ,  ,,-,  ,-,-};
int Compass_Op [][] = { , ,-,  ,,-,  , ,-};
int Compass_Op [][] = { ,-,-,  ,,-,  , , };
int Compass_Op [][] = {-,-,-,  ,, ,  , , };
int Compass_Op [][] = {-,-, , -,, ,  , , };
int Compass_Op [][] = {-, , , -,, , -, , };
int Compass_Op [][] = { , , , -,, , -,-, };

void Compass (row,col)
int row,col;
{
  int value;
  int op_rows, op_cols;
  int Compass,Compass,Compass,Compass;
  int Compass,Compass,Compass,Compass;
  
  Compass = Compass = Compass = Compass = ;
  Compass = Compass = Compass = Compass = ;
  
  for (op_rows = -; op_rows < ; op_rows++)
    for (op_cols = -; op_cols < ; op_cols++)
      {
	if (((row + op_rows) >= ) && ((col + op_cols) >= ))
	  {
	    
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    Compass += ((int) Input_Image [row + op_rows][col + op_cols]) * 
	                       Compass_Op [op_rows + ][op_cols + ];
	    
	  }
      }
  if (Compass < Compass)
    value = Compass;
  else 
    value = Compass;      
  if (value < Compass)
    value = Compass;
  if (value < Compass)
    value = Compass;
  if (value < Compass)
    value = Compass;
  if (value < Compass)
    value = Compass;
  if (value < Compass)
    value = Compass;
  if (value < Compass)
    value = Compass;

  Magnitude_Image [row][col] = (char) value;
}

void Laplace (row,col)
int row,col;
{
  int op_rows, op_cols;

  Magnitude_Image [row][col] = ;
  for (op_rows = -; op_rows < ; op_rows++)
    for (op_cols = -; op_cols < ; op_cols++)
      if (((row + op_rows) >= ) && ((col + op_cols) >= ))
	Magnitude_Image [row][col] = 
	  (char) ((int)Magnitude_Image [row][col] +
		  ((int) Input_Image [row + op_rows][col + op_cols] * 
		   Laplace_Op [op_rows + ][op_cols + ]));
}

main  ()
{
  FILE *Original_Image_fp;
  FILE *Laplace_mag_fp,*Laplace_mag_fp,*Laplace_mag_fp;
  FILE *Compass_mag_fp;

  int row, col, Algo_Count;

  Original_Image_fp = fopen ("INPUT.IMAGE","rb");

  Laplace_mag_fp = fopen ("Laplace_Magnitude","wb");
  Compass_mag_fp = fopen ("Compass_Magnitude","wb");

  fread ((unsigned char *) Input_Image,sizeof(unsigned char),IMAGEHEIGHT * IMAGEWIDTH,Original_Image_fp);
  for (Algo_Count = ; Algo_Count < ;Algo_Count ++)
    {
      for (row = ; row < IMAGEHEIGHT; row++) 
	for (col = ; col < IMAGEWIDTH; col++) 
	  if (!Algo_Count)
	    Laplace (row,col);
	  else 
	    Compass (row,col);
      
      if (!Algo_Count)
	fwrite(Magnitude_Image,sizeof(char),IMAGEHEIGHT * IMAGEWIDTH,Laplace_mag_fp);
      else 
	fwrite(Magnitude_Image,sizeof(char),IMAGEHEIGHT * IMAGEWIDTH,Compass_mag_fp);
    }
}

  